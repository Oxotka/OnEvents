import os
import yaml
from datetime import datetime
from datetime import date
from datetime import timedelta
from pathlib import Path
from babel.dates import format_date
import shutil
import hashlib
import re

# –ü—É—Ç–∏
EVENTS_DIR = Path("events")
TEMPLATE_FILE = Path("web/index.html")
OUTPUT_DIR = Path("site")
OUTPUT_FILE = OUTPUT_DIR / "index.html"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω
template = TEMPLATE_FILE.read_text(encoding="utf-8")

# –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
events = []

for file in EVENTS_DIR.glob("*.yml"):
    with open(file, "r", encoding="utf-8") as f:
        data = yaml.safe_load(f)

    event_date = datetime.strptime(data["date"], "%Y-%m-%d").date()
    if event_date >= datetime.today().date():
        events.append(data)

# –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
events.sort(key=lambda e: e["date"])

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ICS —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è
def generate_ics_content(event):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .ics —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π UID –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
    uid_string = f"{event['title']}-{event['date']}-{event['city']}"
    uid = hashlib.md5(uid_string.encode('utf-8')).hexdigest() # NOSONAR
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
    location = event['city']
    if event['address']:
        location += f", {event['address']}"
    
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç HTML –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è ICS
    def clean_text(text):
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
        text = re.sub(r'<[^>]+>', '', text)
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è ICS
        text = text.replace('\\', '\\\\')
        text = text.replace(',', '\\,')
        text = text.replace(';', '\\;')
        text = text.replace('\n', '\\n')
        return text
    
    title = clean_text(event['title'])
    description = clean_text(event['description'])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–µ–∫—Ü–∏—è sessions –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    if 'sessions' in event and event['sessions']:
        sessions = event['sessions']
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Å—Å–∏–∏ –ø–æ –¥–∞—Ç–µ
        sessions.sort(key=lambda x: x['date'])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º ICS —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ VEVENT
        ics_content = f"""BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//OnEvents//OnEvents Calendar//RU
CALSCALE:GREGORIAN
METHOD:PUBLISH"""
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è –∫ —Ñ–æ—Ä–º–∞—Ç—É HHMMSS –¥–ª—è ICS
        def to_hhmmss(time_str: str) -> str:
            s = str(time_str).strip()
            s = s.replace('.', ':')
            parts = s.split(':')
            if len(parts) == 1:
                hour = parts[0]
                minute = '00'
            else:
                hour = parts[0]
                minute = parts[1]
            hour = hour.zfill(2)
            minute = minute.zfill(2)
            return f"{hour}{minute}00"

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π VEVENT –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
        for i, session in enumerate(sessions):
            session_date = datetime.strptime(session['date'], "%Y-%m-%d")
            session_uid = f"{uid}-{i+1}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π UID –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Å—Å–∏–∏
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
            start_datetime = f"{session_date.strftime('%Y%m%d')}T{to_hhmmss(session['start_time'])}"
            end_datetime = f"{session_date.strftime('%Y%m%d')}T{to_hhmmss(session['end_time'])}"
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –¥–∞—Ç–æ–π
            date_str = format_date(session_date, format="d MMMM", locale="ru")
            session_title = f"{title} ({date_str})"
            
            ics_content += f"""
BEGIN:VEVENT
UID:{session_uid}@onevents.ru
DTSTART:{start_datetime}
DTEND:{end_datetime}
SUMMARY:{session_title}
DESCRIPTION:{description}\\n\\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {event['registration_url']}\\n\\n–í—Ä–µ–º—è: {session['start_time']}-{session['end_time']}
LOCATION:{location}
STATUS:CONFIRMED
TRANSP:OPAQUE
END:VEVENT"""
        
        ics_content += """
END:VCALENDAR"""
    else:
        # –û–±—ã—á–Ω–æ–µ –æ–¥–Ω–æ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        event_date = datetime.strptime(event['date'], "%Y-%m-%d")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º ICS —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        ics_content = f"""BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//OnEvents//OnEvents Calendar//RU
CALSCALE:GREGORIAN
METHOD:PUBLISH
BEGIN:VEVENT
UID:{uid}@onevents.ru
DTSTART;VALUE=DATE:{event_date.strftime('%Y%m%d')}
SUMMARY:{title}
DESCRIPTION:{description}\\n\\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {event['registration_url']}
LOCATION:{location}
STATUS:CONFIRMED
TRANSP:OPAQUE
END:VEVENT
END:VCALENDAR"""
    
    return ics_content

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
def render_event(e):
    date_obj = datetime.strptime(e['date'], "%Y-%m-%d")
    date_str = date_str = format_date(date_obj, format="d MMMM y", locale="ru")  # 15 —Å–µ–Ω—Ç—è–±—Ä—è 2025
    
    
    if len(e['address']) == 0:
      address_str  = e['city']
    else:
      address_str  = e['city'] + ", "  + e['address']
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è .ics
    safe_title = re.sub(r'[^\w\s-]', '', e['title']).strip()
    safe_title = re.sub(r'[-\s]+', '-', safe_title)
    ics_filename = f"{e['date']}-{safe_title}.ics"
 
    return f"""
    <article class="card" itemscope itemtype="https://schema.org/Event"  data-city="{e['city']}">
      <div class="card-header" style="display:flex; align-items:flex-start; gap:1em;">
        <img class="logo-img" alt="–õ–æ–≥–æ—Ç–∏–ø ¬´{e['title']}¬ª" 
             src="img/{e['icon']}" width="72" height="72" 
             style="border-radius:50%; object-fit:cover;">
        <div class="event-info">
          <h2 class="card-title" itemprop="name" style="margin:0 0 .25em 0;">{e['title']}</h2>
          <div class="meta-item">
            <span class="icon">üìÖ</span>
            <time itemprop="startDate" datetime="{e['date']}">{date_str}</time>
          </div>
          <div class="meta-item">
            <span class="icon">üìç</span>
            <span itemprop="location" itemscope itemtype="https://schema.org/Place">
              <span itemprop="addressLocality">{address_str}</span>
            </span>
          </div>
        </div>
      </div>
      <p>{e['description']}</p>
      <a href="{e['registration_url']}" role="button" target="_blank">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a>
      <a href="calendar/{ics_filename}" role="button" download="{ics_filename}" style="margin-left:0.5rem;">–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å</a>
    </article>
    """

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
events_html = "\n".join(render_event(e) for e in events)

# –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤ —à–∞–±–ª–æ–Ω
today_date_str = format_date(date.today(), format="d MMMM y", locale="ru")
result_html = (
    template
    .replace("{{ events }}", events_html)
    .replace("{{ builddate }}", today_date_str)
)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É site –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
OUTPUT_DIR.mkdir(exist_ok=True)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
OUTPUT_FILE.write_text(result_html, encoding="utf-8")

# –ö–æ–ø–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
shutil.copytree("img", "site/img", dirs_exist_ok=True)

# –ö–æ–ø–∏—Ä—É–µ–º –ò–∫–æ–Ω–∫–∏
shutil.copytree("icons", "site/icons", dirs_exist_ok=True)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
calendar_dir = OUTPUT_DIR / "calendar"
calendar_dir.mkdir(exist_ok=True)

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º .ics —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
for event in events:
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è .ics
    safe_title = re.sub(r'[^\w\s-]', '', event['title']).strip()
    safe_title = re.sub(r'[-\s]+', '-', safe_title)
    ics_filename = f"{event['date']}-{safe_title}.ics"
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .ics —Ñ–∞–π–ª–∞
    ics_content = generate_ics_content(event)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º .ics —Ñ–∞–π–ª
    ics_file_path = calendar_dir / ics_filename
    ics_file_path.write_text(ics_content, encoding="utf-8")
